
services:

  statistics-service:
    build:
      context: ./statistics-service/
      dockerfile: Dockerfile
    restart: always
    container_name: statistics-service
    hostname: statistics-service
    ports:
      - "8082:8082"
    environment:
      - PORT=8082
      - MONGO_DB_URI=mongodb://root:root@mongo:27017
    depends_on:
      mongo:
        condition: service_healthy
    networks:
      - network

  court-service:
    build:
      context: ./court-service/
      dockerfile: Dockerfile
    restart: always
    container_name: court-service
    hostname: court-service
    ports:
      - "8083:8083"
    environment:
      - PORT=8083
      - MONGO_DB_URI=mongodb://root:root@mongo:27017
    depends_on:
      mongo:
        condition: service_healthy
    networks:
      - network

  vehicles-service:
    build:
      context: ./vehicles-service/
      dockerfile: Dockerfile
    restart: always
    container_name: vehicles-service
    hostname: vehicles-service
    ports:
      - "8080:8080"
    environment:
      - PORT=8080
      - MONGO_DB_URI=mongodb://root:root@mongo:27017
      - FILE_PATH=/vehicles-service/vehicle_reports
    depends_on:
      mongo:
        condition: service_healthy
    networks:
      - network
    volumes:
          - ./vehicles-service/vehicle_reports:/vehicles-service/vehicle_reports

  police-service:
    build:
      context: ./police-service/
      dockerfile: Dockerfile
    restart: always
    container_name: police-service
    hostname: police-service
    ports:
      - "8084:8084"
    environment:
      - PORT=8084
      - MONGO_DB_URI=mongodb://root:root@mongo:27017
      - HDFS_URI=namenode:9000
      - FILE_PATH=/police-service/pdf_reports
    depends_on:
      mongo:
        condition: service_healthy
      datanode:
        condition: service_healthy
      namenode:
        condition: service_healthy
    networks:
      - network
    dns:
      - 8.8.8.8
    volumes:
      - ./police-service/pdf_reports:/police-service/pdf_reports

  auth-service:
    build:
      context: ./auth-service/
      dockerfile: Dockerfile
    restart: always
    container_name: auth-service
    hostname: auth-service
    ports:
      - "8085:8085"
    environment:
      - PORT=8085
      - MONGO_DB_URI=mongodb://root:root@mongo:27017
    depends_on:
      mongo:
        condition: service_healthy
    networks:
      - network

  mongo:
    image: mongo:4.4.25
    container_name: mongo-db
    restart: always
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=root
      - MONGO_INITDB_DATABASE=EGovernment
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.runCommand('ping').ok"]
      interval: 10s
      timeout: 20s
      retries: 10
    volumes:
      - mongo_store:/data/db
    networks:
      - network

  mongo-express:
    image: mongo-express
    container_name: mongo-express-db
    restart: always
    environment:
      - ME_CONFIG_MONGODB_SERVER=mongo
      - ME_CONFIG_MONGODB_ADMINUSERNAME=root
      - ME_CONFIG_MONGODB_ADMINPASSWORD=root
      - ME_CONFIG_BASICAUTH_USERNAME=admin
      - ME_CONFIG_BASICAUTH_PASSWORD=admin
    depends_on:
      mongo:
        condition: service_healthy
    ports:
      - "8081:8081"
    volumes:
      - mongo_express_data:/data/db
    networks:
      - network

  namenode:
   image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
   container_name: namenode
   ports:
     - "9870:9870"
     - "9000:9000"
   volumes:
     - hadoop_namenode:/hadoop/dfs/name
   environment:
     - CLUSTER_NAME=gobnb
   env_file:
     - ./hdfs.env
   networks:
     - network

  datanode:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode
    volumes:
      - hadoop_datanode:/hadoop/dfs/data
    environment:
      SERVICE_PRECONDITION: "namenode:9870"
    networks:
      - network
    env_file:
      - ./hdfs.env


volumes:
  mongo_store:
  mongo_express_data:
  hadoop_namenode:
  hadoop_datanode:

networks:
  network:
    driver: bridge